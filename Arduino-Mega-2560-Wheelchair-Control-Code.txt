/*********************************************************************
Combination Code for BLE + Rotary Encoding - Fjord Makeshop NY
For AdaFruit_BlueFruit LE NRF51 Shield and Rotary Encoders
Customized/Modified by Alwin Tong
*********************************************************************/


/*Include Libraries*/
/*=====================================*/
#include <Arduino.h>
#include <SPI.h>
#if not defined (_VARIANT_ARDUINO_DUE_X_) && not defined(ARDUINO_ARCH_SAMD)
  #include <SoftwareSerial.h>
#endif

#include "Adafruit_BLE.h"
#include "Adafruit_BluefruitLE_SPI.h"
//remove UART from defn
//#include "Adafruit_BluefruitLE_UART.h"

#include "BluefruitConfig.h"
/*=====================================*/



/*Assign Previous Rotary Vars*/
/*=====================================*/
double  prevleftval;
double  prevrightval;
bool    leftvalforward;
bool    rightvalforward;
/*=====================================*/




/*Initailize Rotary Vars*/
/*=====================================*/
double leftval=0;
byte  leftPinA=2;
byte leftPinB=3;
int leftASet;
int leftBSet;

double rightval=0;
byte  rightPinA=21;
byte rightPinB=20;
int rightASet;
int rightBSet;
/*====================================*/





/*BLE Settings*/
/*=========================================================================*/
#define FACTORYRESET_ENABLE         1   //perform factory reset boolean
#define MINIMUM_FIRMWARE_VERSION    "0.6.6"


//Set BLE to use Software SPI
/* ...software SPI, using SCK/MOSI/MISO user-defined SPI pins and then user selected CS/IRQ/RST */
Adafruit_BluefruitLE_SPI ble(BLUEFRUIT_SPI_SCK, BLUEFRUIT_SPI_MISO,
                             BLUEFRUIT_SPI_MOSI, BLUEFRUIT_SPI_CS,
                             BLUEFRUIT_SPI_IRQ, BLUEFRUIT_SPI_RST);

// A small helper
void error(const __FlashStringHelper*err) {
  Serial.println(err);
  while (1);
}

/*=========================================================================*/





/*MAIN SETUP LOOP*/
/*=========================================================================*/
/*=========================================================================*/
/*=========================================================================*/


void setup(void)
{
  while (!Serial);  // required for Flora & Micro
  delay(500);

  Serial.begin(115200);
  Serial.println(F("Adafruit Bluefruit HID Keyboard Example"));
  Serial.println(F("---------------------------------------"));

  /* Initialise the module */
  Serial.print(F("Initialising the Bluefruit LE module: "));

  if ( !ble.begin(VERBOSE_MODE) )
  {
    error(F("Couldn't find Bluefruit, make sure it's in CoMmanD mode & check wiring?"));
  }
  Serial.println( F("OK!") );

  if ( FACTORYRESET_ENABLE )
  {
    /* Perform a factory reset to make sure everything is in a known state */
    Serial.println(F("Performing a factory reset: "));
    if ( ! ble.factoryReset() ){
      error(F("Couldn't factory reset"));
    }
  }

  /* Disable command echo from Bluefruit */
  ble.echo(false);

  Serial.println("Requesting Bluefruit info:");
  /* Print Bluefruit information */
  ble.info();

  /* Change the device name to make it easier to find */
  Serial.println(F("Setting device name to 'Bluefruit Keyboard': "));
  if (! ble.sendCommandCheckOK(F( "AT+GAPDEVNAME=Bluefruit Keyboard" )) ) {
    error(F("Could not set device name?"));
  }
  
  /* Enable HID Service */
  Serial.println(F("Enable HID Service (including Keyboard): "));
  if ( ble.isVersionAtLeast(MINIMUM_FIRMWARE_VERSION) )
  {
    if ( !ble.sendCommandCheckOK(F( "AT+BleHIDEn=On" ))) {
      error(F("Could not enable Keyboard"));
    }
  }else
  {
    if (! ble.sendCommandCheckOK(F( "AT+BleKeyboardEn=On"  ))) {
      error(F("Could not enable Keyboard"));
    }
  }

  /* Add or remove service requires a reset */
  Serial.println(F("Performing a SW reset (service changes require a reset): "));
  if (! ble.reset() ) {
    error(F("Couldn't reset??"));
  }

  Serial.println();
  Serial.println(F("Go to your phone's Bluetooth settings to pair your device"));
  Serial.println(F("then open an application that accepts keyboard input"));

  Serial.println();
  Serial.println(F("Enter the character(s) to send:"));
  Serial.println(F("- \\r for Enter"));
  Serial.println(F("- \\n for newline"));
  Serial.println(F("- \\t for tab"));
  Serial.println(F("- \\b for backspace"));

  Serial.println();



/*ROTARY SETUP*/
/*=========================================================================*/

  // This is defined earlier at Baud 115200 in function. 
  // Serial.begin(9600);
  pinMode(leftPinA, INPUT);
  pinMode(leftPinB, INPUT);
  pinMode(rightPinA, INPUT);
  pinMode(rightPinB, INPUT);

  leftASet = digitalRead(leftPinA);
  leftBSet = digitalRead(leftPinB);

  rightASet = digitalRead(rightPinA);
  rightBSet = digitalRead(rightPinB);
 
  attachInterrupt(digitalPinToInterrupt( leftPinA ), INCLEFT, CHANGE);
  attachInterrupt(digitalPinToInterrupt( leftPinB ), DECLEFT, CHANGE);

  attachInterrupt(digitalPinToInterrupt( rightPinA ), INCRIGHT, CHANGE);
  attachInterrupt(digitalPinToInterrupt( rightPinB ), DECRIGHT, CHANGE);

  Serial.println("rotary setup complete");


// End Rotary Setup Instructions



}  // <--- Close Setup Bracket


/*END ROTARY SETUP*/
/*=========================================================================*/


/*END MAIN SETUP*/
/*=========================================================================*/
/*=========================================================================*/
/*=========================================================================*/









/*MAIN UPDATE LOOP START*/
/*=========================================================================*/
/*=========================================================================*/
/*=========================================================================*/


// @brief  BLE Constantly poll for new command or response data


void loop(void)
{




// Start BLE Prompt
  
  // Display prompt
  Serial.print(F("keyboard > "));

  // Check for user input and echo it back if anything was found
  char keys[BUFSIZE+1];
  getUserInput(keys, BUFSIZE);

  Serial.print("\nSending ");
  Serial.println(keys);

  ble.print("AT+BleKeyboard=");
  ble.println(keys);

  if( ble.waitForOK() )
  {
    Serial.println( F("OK!") );
  }else
  {
    Serial.println( F("FAILED!") );
  }
}




// @brief Checks for user input (via the Serial Monitor)
/*=========================================================================*/


void getUserInput(char buffer[], uint8_t maxSize)
{
  memset(buffer, 0, maxSize);


  
  while( Serial.available() == 0 ) 
  {
  
    // Set time of loop
    delay(2500);


    
        // Alwin improv code --- can use Serial.println( F("first part of loop")); // a shim to tell where I am
        /*=========================================================================*/


        //compare the previous values left side

           //if previous left equal or larger than current

           //this value is reversed as the left wheel is clockwise -> increment up
           if (prevleftval > leftval) {
            leftvalforward = 1;
             }

           //this value is reversed as the left wheel is clockwise -> increment up
           else if (prevleftval < leftval) {
             leftvalforward = 0;
             }

          else {
            //do nothing
             }

        // end compare the previous values left side




       //compare the previous values right side

          //if previous right equal or larger than current
       
            if (prevrightval < rightval) {
              rightvalforward = 1;
            }

            else if (prevrightval > rightval) {
              rightvalforward = 0;
            }

            else {
              //do nothing
            }

      // end compare the previous values right side





     //look at move forward / back / rotate left / rotate right


      //forward
        if ((rightvalforward == 1) && (leftvalforward == 1)) {
          ble.print("AT+BleKeyboard=");
          ble.println("www");
        }


        //backwards
        else if ((rightvalforward == 0) && (leftvalforward == 0)) {
           ble.print("AT+BleKeyboard=");
          ble.println("sss");
        }


        //left
        if ((rightvalforward == 1) && (leftvalforward == 0)) {
          ble.print("AT+BleKeyboard=");
          ble.println("aaa");
       }


       //right
        if ((rightvalforward == 0) && (leftvalforward == 1)) {
           ble.print("AT+BleKeyboard=");
           ble.println("ddd");
        }

        //do nothing
        else {
          //do nothing... lounge in chair.
        }


    //end look at move forward / back / rotate left / rotate right




    //set the new prevleftval and prevrightval
    
      prevleftval = leftval;
      prevrightval = rightval;
    
    //End set the new prevleftval and prevrightval  




//print the values
ble.println(F("current left and right values"));
ble.print( leftval );
ble.print(F( ", " ));
ble.println( rightval );

ble.println(F("previous left and right values"));
ble.print( prevleftval );
ble.print(F( ", "));
ble.println( prevrightval );

ble.print(F("boolean left: "));
ble.println(leftvalforward);
ble.print(F("boolean right: "));
ble.println(rightvalforward);

ble.println(F( ""));
ble.println(F( ""));



//end print the values



//left overs 
/* ble.print("AT+BleKeyboard=");
ble.println("sssssssssssssssssssssss");
 
ble.print( leftval );
ble.print( ", " );
ble.println( rightval );

ble.print("AT+BleKeyboard=");
ble.println("bluetooth work now");   //-- */
//end left overs



  } // end while loop

  uint8_t count=0;

  do {
    count += Serial.readBytes(buffer+count, maxSize);
    delay(2);
      Serial.println( F("second part of loop")); 
  } 
  
  while( (count < maxSize) && !(Serial.available() == 0) );



}  // <--- Close Update Loop Bracket




/*MAIN UPDATE LOOP END*/
/*=========================================================================*/
/*=========================================================================*/
/*=========================================================================*/





// Include other Rotary Functions
/*=========================================================================*/


void INCLEFT()
{
  leftASet = digitalRead(leftPinA) == HIGH;
  leftval += (leftASet != leftBSet) ? +1 : -1;
}

void DECLEFT()
{
  leftBSet = digitalRead(leftPinB) == HIGH;
  leftval += (leftASet == leftBSet) ? +1 : -1;
}

void INCRIGHT()
{
  rightASet = digitalRead(rightPinA) == HIGH;
  rightval += (rightASet != rightBSet) ? +1 : -1;
}

void DECRIGHT()
{
  rightBSet = digitalRead(rightPinB) == HIGH;
  rightval += (rightASet == rightBSet) ? +1 : -1;
}

/*=========================================================================*/
// End Include other Rotary Functions